includeConfig '../nextflow.base.dockers.config'
includeConfig './combine_waiting.nf.docker.config'

params {
    stranded = false
    singleEnd = false
    bams_dir = ''
    cmp_result_dir = "${launchDir}/CMPileup"
    cmp_regions_name = ''
    which_CMP_python = 'python'
    which_CMP_PipelineManger = '/home/biodocker/GGPS/Session/PipelineManger.py'
    cmp_truncation = '0,0'
    cmp_additional_params = ''
    regions_name = 'unset'
    bams_suffix='.Aligned.sortedByCoord.out.bam'
    run_soft_intersect = false 
    conf_prefix= params.run_soft_intersect ? "${params.levanon_lab_pipelines_dir}/Resources/CMPileup/Docker/PileupKnown.SoftIntersect" : "${params.levanon_lab_pipelines_dir}/Resources/CMPileup/Docker/PileupKnown"
    cmp_conf_file = params.stranded ? "${params.conf_prefix}.stranded.conf" : "${params.conf_prefix}.conf"
    // can be bed 3 or more
    cmp_regions_bed = "${params.levanon_lab_pipelines_dir}/Resources/CMPileup/orshai_AG_only_published.bed6.bed"
    run_cmp_summarize = true
    which_cmp_summarize = "Rscript ${params.levanon_lab_pipelines_dir}/Resources/process_cmpileup.R"
}
params.use_cmpileup_hub_image = true
params.cmpileup_docker_image = params.use_editing_index_hub_image ? 'levanonlab/cmpileup:1.0' : 'local/cmpileup:latest'
params.cmpileup_Docker_file_dir = "${params.levanon_lab_pipelines_dir}/Resources/CMPileup/Docker/"


profiles {
    hg38 {
        params.profile_selected = "hg38"
        // curently not supporting using built-in files for genome annotation
        params.genome_file = '/private/common/Software/AEI/RNAEditingIndex1.1/RNAEditingIndexer/Resources/Genomes/HomoSapiens/ucscHg38Genome.fa'
        // params.genome_file = '/private/common/Software/deNovoDetect/Resources/processedTables/hg38_all.UPPER.fa'
    }
    // TODO
    mm10 {
        params.profile_selected = "mm10"
        params.genome_file = '/private/dropbox/Genomes/Mouse/mm10/all.fa'
    }
    standard {
        params.profile_selected = ""
        params.genome_file = ''
    }
}


process {
    withName:RUN_CMP{
    container = params.cmpileup_docker_image
    }
}