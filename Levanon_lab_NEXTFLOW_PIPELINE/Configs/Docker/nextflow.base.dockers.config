params.help=false
params.have_base_config=true
// to include use: includeConfig '/home/alu/twerski/Scripts/Nextflow/Levanon_lab_NEXTFLOW_PIPELINE/nextflow.base.dockers.config'
/***********************************************************************

                Nextflow dockers base config

**************************************************************************/

docker {
    enabled = true
    docker.runOptions='-u $(id -u):$(id -g)'
}

params.docker_run = true
params.my_NextflowDir= '/home/alu/twerski/Scripts/Nextflow/'
params.levanon_lab_pipelines_dir = "${params.my_NextflowDir}/Levanon_lab_NEXTFLOW_PIPELINE"
// when Nextflow process have path in the input its not accepting empty string - so I will give him this path instead
params.EmptyPath = '/dev/null'

/*
TODO:
1. find docker and list it for every process and write it
2. take care of mounting  - nextflow will mount every input file - need to change files from string to file object in some cases
3. fill all the which commands below
*/

/* docker options
envWhitelist: Comma separated list of environment variable names to be included in the container environment.
sudo: Executes Docker run command as sudo (default: false).
tty: Allocates a pseudo-tty (default: false).
temp: Mounts a path of your choice as the /tmp directory in the container. Use the special value auto to create a temporary directory each time a container is created.
remove: Clean-up the container after the execution (default: true). For details see: https://docs.docker.com/engine/reference/run/#clean-up—rm .
runOptions This attribute can be used to provide any extra command line options supported by the docker run command. For details see: https://docs.docker.com/engine/reference/run/ .
fixOwnership Fixes ownership of files created by the docker container.
engineOptions This attribute can be used to provide any option supported by the Docker engine
mountFlags: Add the specified flags to the volume mounts e.g. mountFlags = ‘ro,Z’
*/



process {
    errorStrategy = 'ignore' 
    /*withLabel:simple_bash {
        container = 'frolvlad/alpine-bash:latest'
    }*/
      /*withName:foo {
        container = 'image_name_1'
        containerOptions = '--volume /data/db:/db'
    }*/
}


executor {
    $local {
        queueSize = 10
  }
}





// useful options

/*trace {
    enabled = true
    file = 'pipeline_trace.txt'
    overwrite = true
}*/

/* report {
    enabled = true
    file = 'pipeline_report.html'
    overwrite = true
} */